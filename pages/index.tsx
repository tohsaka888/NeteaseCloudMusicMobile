import { Box, Flex, useColorMode } from "@chakra-ui/react";
import { Space, Swiper } from "antd-mobile";
import type { NextPage } from "next";
import dynamic from "next/dynamic";
import Head from "next/head";
import Image from "next/image";
import Banner from "../components/Banner";
import PlaylistIntro from "../components/Playlist/PlaylistIntro";
import ToplistIntro from "../components/Toplist/ToplistIntro";
import { baseUrl } from "../config/baseUrl";
import styles from "../styles/Home.module.css";
import { ScrollArea } from "../styles/scroll.styles";
import Title from "../styles/title.styles";

const SongIntro = dynamic(() => import("../components/Song/SongIntro"), {
  ssr: false,
});

const Home: NextPage<{
  banners: any;
  hotPlaylists: any[];
  newSongs: any[];
}> = ({ banners, hotPlaylists, newSongs }) => {
  const { colorMode } = useColorMode();
  const shadow =
    colorMode === "dark"
      ? "0px 0px 15px 3px #334d66"
      : "0px 0px 20px 3px #cecece";
  return (
    <div>
      <Head>
        <title>Netease Cloud Music Mobile</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        {/* 轮播图 */}
        <Box padding={"16px"}>
          <Banner banners={banners} />
        </Box>

        {/* 推荐歌单 */}
        <Box
          margin="8px 16px"
          borderRadius={"5px"}
          boxShadow={shadow}
          padding={"0px 12px"}
        >
          <Title>推荐歌单</Title>
          <ScrollArea>
            <Space style={{ "--gap": "16px" }}>
              {hotPlaylists.map((item, index) => (
                <PlaylistIntro playlist={item} key={index} />
              ))}
            </Space>
          </ScrollArea>
        </Box>

        {/* 留白 */}
        <Box height={"8px"} />

        {/* 推荐歌曲 */}
        <Box
          margin="8px 16px"
          borderRadius={"5px"}
          boxShadow={shadow}
          padding={"0px 12px"}
        >
          <Title>推荐歌曲</Title>
          <Box mt={"16px"}>
            <Swiper indicator={() => null}>
              <Swiper.Item>
                <SongIntro songs={newSongs.slice(0, 3)} />
              </Swiper.Item>
              <Swiper.Item>
                <SongIntro songs={newSongs.slice(3, 6)} />
              </Swiper.Item>
              <Swiper.Item>
                <SongIntro songs={newSongs.slice(6, 9)} />
              </Swiper.Item>
            </Swiper>
          </Box>
        </Box>

        {/* 留白 */}
        <Box height={"8px"} />

        {/* 排行榜 */}
        <Box
          margin="8px 16px"
          borderRadius={"5px"}
          boxShadow={shadow}
          padding={"0px 12px"}
        >
          <Title>排行榜</Title>
          <Box mt={"16px"}>
            <Swiper indicator={() => null}>
              <Swiper.Item>
                <ToplistIntro title="飙升榜">
                  <SongIntro songs={newSongs.slice(0, 3)} isToplist={true} />
                </ToplistIntro>
              </Swiper.Item>
              <Swiper.Item>
                <ToplistIntro title="XX榜">
                  <SongIntro songs={newSongs.slice(0, 3)} isToplist={true} />
                </ToplistIntro>
              </Swiper.Item>
              <Swiper.Item>
                <ToplistIntro title="XX榜">
                  <SongIntro songs={newSongs.slice(0, 3)} isToplist={true} />
                </ToplistIntro>
              </Swiper.Item>
            </Swiper>
          </Box>
        </Box>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
};

export const getStaticProps = async () => {
  const bannerRes = await fetch(`${baseUrl}/banner?type=1`);
  const banners = (await bannerRes.json()).banners;

  const hotPlaylistRes = await fetch(`${baseUrl}/top/playlist?limit=10`);
  const hotPlaylists = (await hotPlaylistRes.json()).playlists;

  const newSongsRes = await fetch(
    `${baseUrl}/playlist/detail?id=19723756&limit=9`
  );
  const newSongs = (await newSongsRes.json()).playlist;

  return {
    props: {
      banners,
      hotPlaylists,
      newSongs: newSongs.tracks.splice(0, 9),
    },
  };
};

export default Home;
